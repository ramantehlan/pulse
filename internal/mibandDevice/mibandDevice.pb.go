// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mibandDevice.proto

package mibandDevice

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// DeviceUUID is the strucutre of the incoming message
type DeviceUUID struct {
	UUID                 string   `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceUUID) Reset()         { *m = DeviceUUID{} }
func (m *DeviceUUID) String() string { return proto.CompactTextString(m) }
func (*DeviceUUID) ProtoMessage()    {}
func (*DeviceUUID) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc977901481d1942, []int{0}
}

func (m *DeviceUUID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceUUID.Unmarshal(m, b)
}
func (m *DeviceUUID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceUUID.Marshal(b, m, deterministic)
}
func (m *DeviceUUID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceUUID.Merge(m, src)
}
func (m *DeviceUUID) XXX_Size() int {
	return xxx_messageInfo_DeviceUUID.Size(m)
}
func (m *DeviceUUID) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceUUID.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceUUID proto.InternalMessageInfo

func (m *DeviceUUID) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

// HeartBeats is to structure of outgoing message
type HeartBeats struct {
	Pulse                string   `protobuf:"bytes,1,opt,name=pulse,proto3" json:"pulse,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeartBeats) Reset()         { *m = HeartBeats{} }
func (m *HeartBeats) String() string { return proto.CompactTextString(m) }
func (*HeartBeats) ProtoMessage()    {}
func (*HeartBeats) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc977901481d1942, []int{1}
}

func (m *HeartBeats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartBeats.Unmarshal(m, b)
}
func (m *HeartBeats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartBeats.Marshal(b, m, deterministic)
}
func (m *HeartBeats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartBeats.Merge(m, src)
}
func (m *HeartBeats) XXX_Size() int {
	return xxx_messageInfo_HeartBeats.Size(m)
}
func (m *HeartBeats) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartBeats.DiscardUnknown(m)
}

var xxx_messageInfo_HeartBeats proto.InternalMessageInfo

func (m *HeartBeats) GetPulse() string {
	if m != nil {
		return m.Pulse
	}
	return ""
}

func (m *HeartBeats) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*DeviceUUID)(nil), "DeviceUUID")
	proto.RegisterType((*HeartBeats)(nil), "HeartBeats")
}

func init() { proto.RegisterFile("mibandDevice.proto", fileDescriptor_dc977901481d1942) }

var fileDescriptor_dc977901481d1942 = []byte{
	// 142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xca, 0xcd, 0x4c, 0x4a,
	0xcc, 0x4b, 0x71, 0x49, 0x2d, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x52,
	0xe0, 0xe2, 0x82, 0xf0, 0x43, 0x43, 0x3d, 0x5d, 0x84, 0x84, 0xb8, 0x58, 0x40, 0xb4, 0x04, 0xa3,
	0x02, 0xa3, 0x06, 0x67, 0x10, 0x98, 0xad, 0x64, 0xc1, 0xc5, 0xe5, 0x91, 0x9a, 0x58, 0x54, 0xe2,
	0x94, 0x9a, 0x58, 0x52, 0x2c, 0x24, 0xc2, 0xc5, 0x5a, 0x50, 0x9a, 0x53, 0x9c, 0x0a, 0x55, 0x02,
	0xe1, 0x80, 0x44, 0x53, 0x8b, 0x8a, 0xf2, 0x8b, 0x24, 0x98, 0x20, 0xa2, 0x60, 0x8e, 0x91, 0x2d,
	0x17, 0x8f, 0x2f, 0x92, 0x8d, 0x42, 0xba, 0x5c, 0xbc, 0xee, 0xa9, 0x25, 0x48, 0x86, 0x71, 0xeb,
	0x21, 0xec, 0x96, 0xe2, 0xd6, 0x43, 0xc8, 0x28, 0x31, 0x18, 0x30, 0x26, 0xb1, 0x81, 0x5d, 0x68,
	0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x71, 0xa2, 0xa6, 0xb7, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MibandDeviceClient is the client API for MibandDevice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MibandDeviceClient interface {
	GetHeartBeats(ctx context.Context, in *DeviceUUID, opts ...grpc.CallOption) (MibandDevice_GetHeartBeatsClient, error)
}

type mibandDeviceClient struct {
	cc *grpc.ClientConn
}

func NewMibandDeviceClient(cc *grpc.ClientConn) MibandDeviceClient {
	return &mibandDeviceClient{cc}
}

func (c *mibandDeviceClient) GetHeartBeats(ctx context.Context, in *DeviceUUID, opts ...grpc.CallOption) (MibandDevice_GetHeartBeatsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MibandDevice_serviceDesc.Streams[0], "/MibandDevice/GetHeartBeats", opts...)
	if err != nil {
		return nil, err
	}
	x := &mibandDeviceGetHeartBeatsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MibandDevice_GetHeartBeatsClient interface {
	Recv() (*HeartBeats, error)
	grpc.ClientStream
}

type mibandDeviceGetHeartBeatsClient struct {
	grpc.ClientStream
}

func (x *mibandDeviceGetHeartBeatsClient) Recv() (*HeartBeats, error) {
	m := new(HeartBeats)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MibandDeviceServer is the server API for MibandDevice service.
type MibandDeviceServer interface {
	GetHeartBeats(*DeviceUUID, MibandDevice_GetHeartBeatsServer) error
}

// UnimplementedMibandDeviceServer can be embedded to have forward compatible implementations.
type UnimplementedMibandDeviceServer struct {
}

func (*UnimplementedMibandDeviceServer) GetHeartBeats(req *DeviceUUID, srv MibandDevice_GetHeartBeatsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetHeartBeats not implemented")
}

func RegisterMibandDeviceServer(s *grpc.Server, srv MibandDeviceServer) {
	s.RegisterService(&_MibandDevice_serviceDesc, srv)
}

func _MibandDevice_GetHeartBeats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceUUID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MibandDeviceServer).GetHeartBeats(m, &mibandDeviceGetHeartBeatsServer{stream})
}

type MibandDevice_GetHeartBeatsServer interface {
	Send(*HeartBeats) error
	grpc.ServerStream
}

type mibandDeviceGetHeartBeatsServer struct {
	grpc.ServerStream
}

func (x *mibandDeviceGetHeartBeatsServer) Send(m *HeartBeats) error {
	return x.ServerStream.SendMsg(m)
}

var _MibandDevice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MibandDevice",
	HandlerType: (*MibandDeviceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetHeartBeats",
			Handler:       _MibandDevice_GetHeartBeats_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mibandDevice.proto",
}
